)
)
)
library(rTorch)
torch       <- import("torch")
torchvision <- import("torchvision")
nn          <- import("torch.nn")
transforms  <- import("torchvision.transforms")
dsets       <- import("torchvision.datasets")
builtins    <- import_builtins()
np          <- import("numpy")
## Dataset iteration batch settings
# folders where the images are located
train_data_path = './mnist_png_full/training/'
test_data_path  = './mnist_png_full/testing/'
train_dataset = torchvision$datasets$ImageFolder(root = train_data_path,
transform = torchvision$transforms$ToTensor()
)
print(train_dataset)
library(data.table)
library(tictoc)
tic()
fun_list <- list(
#numel = c("numel"),
sum   = c("sum",    "item"),
mean  = c("mean",   "item"),
std   = c("std",    "item"),
med   = c("median", "item"),
max   = c("max",    "item"),
min   = c("min",    "item")
)
idx <- seq(0L, 5999L)
fun_get_tensor <- function(x) py_get_item(train_dataset, x)[[1]]
stat_fun <- function(x, str_fun) {
fun_var <- paste0("fun_get_tensor(x)", "$", str_fun, "()")
sapply(idx, function(x)
ifelse(is.numeric(eval(parse(text = fun_var))),  # size return chracater
eval(parse(text = fun_var)),              # all else are numeric
as.character(eval(parse(text = fun_var)))))
}
dt <- data.table(ridx = idx+1,
do.call(data.table,
lapply(
sapply(fun_list, function(x) paste(x, collapse = "()$")),
function(y) stat_fun(1, y)
)
)
)
library(rTorch)
torch       <- import("torch")
torchvision <- import("torchvision")
nn          <- import("torch.nn")
transforms  <- import("torchvision.transforms")
dsets       <- import("torchvision.datasets")
builtins    <- import_builtins()
np          <- import("numpy")
# folders where the images are located
train_data_path = './mnist_png_full/training/'
test_data_path  = './mnist_png_full/testing/'
# read the datasets without normalization
train_dataset = torchvision$datasets$ImageFolder(root = train_data_path,
transform = torchvision$transforms$ToTensor()
)
print(train_dataset)
library(tictoc)
tic()
fun_list <- list(
size  = c("size"),
numel = c("numel"),
sum   = c("sum",    "item"),
mean  = c("mean",   "item"),
std   = c("std",    "item"),
med   = c("median", "item"),
max   = c("max",    "item"),
min   = c("min",    "item")
)
idx <- seq(0L, 599L)    # how many samples
fun_get_tensor <- function(x) py_get_item(train_dataset, x)[[1]]
stat_fun <- function(x, str_fun) {
fun_var <- paste0("fun_get_tensor(x)", "$", str_fun, "()")
sapply(idx, function(x)
ifelse(is.numeric(eval(parse(text = fun_var))),  # size return chracater
eval(parse(text = fun_var)),              # all else are numeric
as.character(eval(parse(text = fun_var)))))
}
df <- data.frame(ridx = idx+1,      # index number for the sample
do.call(data.frame,
lapply(
sapply(fun_list, function(x) paste(x, collapse = "()$")),
function(y) stat_fun(1, y)
)
)
)
py_get_item(train_dataset)
py_get_item(train_dataset, "sum")
py_get_item(train_dataset, 1)
py_get_item(train_dataset, 1L)
py_get_item(train_dataset, 1L)[[1]]
fun_var <- paste0("fun_get_tensor(x)", "$", str_fun, "()")
str_fun <- fun_list[1]
fun_var <- paste0("fun_get_tensor(x)", "$", str_fun, "()")
str_fun <- fun_list[1]
fun_var <- paste0("fun_get_tensor(x)", "$", str_fun, "()")
fun_var
str_fun <- fun_list[1]
fun_var <- paste0("fun_get_tensor(x)", "$", str_fun, "()")
fun_var
str_fun <- fun_list[2]
fun_var <- paste0("fun_get_tensor(x)", "$", str_fun, "()")
fun_var
str_fun <- fun_list[3]
fun_var <- paste0("fun_get_tensor(x)", "$", str_fun, "()")
fun_var
fun_list <- list(
numel = c("numel"),
sum   = c("sum",    "item"),
mean  = c("mean",   "item"),
std   = c("std",    "item"),
med   = c("median", "item"),
max   = c("max",    "item"),
min   = c("min",    "item")
)
str_fun <- fun_list[3]
fun_var <- paste0("fun_get_tensor(x)", "$", str_fun, "()")
fun_var
fun_list <- list(
numel = c("numel"),
sum   = c("sum",    "item"),
mean  = c("mean",   "item"),
std   = c("std",    "item"),
med   = c("median", "item"),
max   = c("max",    "item"),
min   = c("min",    "item")
)
str_fun <- fun_list[1]
fun_var <- paste0("fun_get_tensor(x)", "$", str_fun, "()")
fun_var
eval(parse(text = fun_var)
eval(parse(text = fun_var))
sapply(idx, function(x)
eval(parse(text = fun_var))
)
sapply(idx, function(x) eval(parse(text = fun_var))  )
library(data.table)
library(tictoc)
tic()
fun_list <- list(
numel = c("numel"),
sum   = c("sum",    "item"),
mean  = c("mean",   "item"),
std   = c("std",    "item"),
med   = c("median", "item"),
max   = c("max",    "item"),
min   = c("min",    "item")
)
idx <- seq(0L, 5999L)
fun_get_tensor <- function(x) py_get_item(train_dataset, x)[[1]]
stat_fun <- function(x, str_fun) {
fun_var <- paste0("fun_get_tensor(x)", "$", str_fun, "()")
sapply(idx, function(x)
ifelse(is.numeric(eval(parse(text = fun_var))),  # size return chracater
eval(parse(text = fun_var)),              # all else are numeric
as.character(eval(parse(text = fun_var)))))
}
dt <- data.table(ridx = idx+1,
do.call(data.table,
lapply(
sapply(fun_list, function(x) paste(x, collapse = "()$")),
function(y) stat_fun(1, y)
)
)
)
library(data.table)
library(tictoc)
tic()
fun_list <- list(
numel = c("numel"),
sum   = c("sum",    "item"),
mean  = c("mean",   "item"),
std   = c("std",    "item"),
med   = c("median", "item"),
max   = c("max",    "item"),
min   = c("min",    "item")
)
idx <- seq(0L, 5999L)
fun_get_tensor <- function(x) py_get_item(train_dataset, x)[[1]]
stat_fun <- function(x, str_fun) {
fun_var <- paste0("fun_get_tensor(x)", "$", str_fun, "()")
sapply(idx, function(x)
ifelse(is.numeric(eval(parse(text = fun_var))),  # size return chracater
eval(parse(text = fun_var)),              # all else are numeric
as.character(eval(parse(text = fun_var)))))
}
fun_get_tensor(1)
fun_get_tensor(1L)
fun_get_tensor(2L)
fun_get_tensor(2L)
fun_get_tensor(3L)
fun_get_tensor(3000L)
fun_get_tensor(3000L)
py_get_item(train_dataset, 1L)
py_get_item(train_dataset, 1L)$shape
py_get_item(train_dataset, 1L)
item <- py_get_item(train_dataset, 1L)
class(item)
item <- py_get_item(train_dataset, 1L)[1]
class(item)
item <- py_get_item(train_dataset, 1L)
class(item)
item <- py_get_item(train_dataset, 0L)
class(item)
item <- py_get_item(train_dataset, 1L)
class(item)
item <- py_get_item(train_dataset, 1L)[[1]]
class(item)
item <- py_get_item(train_dataset, 1L)[[1]]
class(item)
item
item <- py_get_item(train_dataset, 1L)[1]
class(item)
item
item <- py_get_item(train_dataset, 1L)[1]
class(item)
item
item <- py_get_item(train_dataset, 1)[1]
item <- py_get_item(train_dataset, 1L)[1]
class(item)
item
train_dataset
train_dataset[1]
train_dataset[0]
train_dataset[1]
train_dataset[3]
train_dataset[3L]
train_dataset[3000L]
train_dataset[3000L][[1]]
py_get_item(train_dataset)
py_get_item(train_dataset, 1L)
py_get_item(train_dataset, 1L)[[1]]
py_get_item(train_dataset, 1L)[[0]]
library(data.table)
library(tictoc)
tic()
fun_list <- list(
numel = c("numel"),
sum   = c("sum",    "item"),
mean  = c("mean",   "item"),
std   = c("std",    "item"),
med   = c("median", "item"),
max   = c("max",    "item"),
min   = c("min",    "item")
)
idx <- seq(0L, 5999L)
fun_get_tensor <- function(x) py_get_item(train_dataset, x)[[0]]
stat_fun <- function(x, str_fun) {
fun_var <- paste0("fun_get_tensor(x)", "$", str_fun, "()")
sapply(idx, function(x)
ifelse(is.numeric(eval(parse(text = fun_var))),  # size return character
eval(parse(text = fun_var)),              # all else are numeric
as.character(eval(parse(text = fun_var)))))
}
dt <- data.table(ridx = idx+1,
do.call(data.table,
lapply(
sapply(fun_list, function(x) paste(x, collapse = "()$")),
function(y) stat_fun(1, y)
)
)
)
library(data.table)
library(tictoc)
tic()
fun_list <- list(
numel = c("numel"),
sum   = c("sum",    "item"),
mean  = c("mean",   "item"),
std   = c("std",    "item"),
med   = c("median", "item"),
max   = c("max",    "item"),
min   = c("min",    "item")
)
idx <- seq(0L, 599L)
fun_get_tensor <- function(x) py_get_item(train_dataset, x)[[0]]
stat_fun <- function(x, str_fun) {
fun_var <- paste0("fun_get_tensor(x)", "$", str_fun, "()")
sapply(idx, function(x)
ifelse(is.numeric(eval(parse(text = fun_var))),  # size return character
eval(parse(text = fun_var)),              # all else are numeric
as.character(eval(parse(text = fun_var)))))
}
dt <- data.table(ridx = idx+1,
do.call(data.table,
lapply(
sapply(fun_list, function(x) paste(x, collapse = "()$")),
function(y) stat_fun(1, y)
)
)
)
head(dt)
toc()
#    60    1.266 sec elapsed
#   600   11.798 sec elapsed;
#  6000  119.256 sec elapsed;
# 60000 1117.619 sec elapsed
library(data.table)
library(tictoc)
options(torch.extract.style = 'R')
tic()
fun_list <- list(
numel = c("numel"),
sum   = c("sum",    "item"),
mean  = c("mean",   "item"),
std   = c("std",    "item"),
med   = c("median", "item"),
max   = c("max",    "item"),
min   = c("min",    "item")
)
idx <- seq(0L, 599L)
fun_get_tensor <- function(x) py_get_item(train_dataset, x)[[0]]
stat_fun <- function(x, str_fun) {
fun_var <- paste0("fun_get_tensor(x)", "$", str_fun, "()")
sapply(idx, function(x)
ifelse(is.numeric(eval(parse(text = fun_var))),  # size return character
eval(parse(text = fun_var)),              # all else are numeric
as.character(eval(parse(text = fun_var)))))
}
dt <- data.table(ridx = idx+1,
do.call(data.table,
lapply(
sapply(fun_list, function(x) paste(x, collapse = "()$")),
function(y) stat_fun(1, y)
)
)
)
library(data.table)
library(tictoc)
options(torch.extract.style = 'R')
tic()
fun_list <- list(
numel = c("numel"),
sum   = c("sum",    "item"),
mean  = c("mean",   "item"),
std   = c("std",    "item"),
med   = c("median", "item"),
max   = c("max",    "item"),
min   = c("min",    "item")
)
idx <- seq(0L, 599L)
fun_get_tensor <- function(x) py_get_item(train_dataset, x)[[0]]
stat_fun <- function(x, str_fun) {
fun_var <- paste0("fun_get_tensor(x)", "$", str_fun, "()")
sapply(idx, function(x)
ifelse(is.numeric(eval(parse(text = fun_var))),  # size return character
eval(parse(text = fun_var)),              # all else are numeric
as.character(eval(parse(text = fun_var)))))
}
dt <- data.table(ridx = idx+1,
do.call(data.table,
lapply(
sapply(fun_list, function(x) paste(x, collapse = "()$")),
function(y) stat_fun(1, y)
)
)
)
head(dt)
library(data.table)
library(tictoc)
options(torch.extract.style = 'python')
tic()
fun_list <- list(
numel = c("numel"),
sum   = c("sum",    "item"),
mean  = c("mean",   "item"),
std   = c("std",    "item"),
med   = c("median", "item"),
max   = c("max",    "item"),
min   = c("min",    "item")
)
idx <- seq(0L, 599L)
fun_get_tensor <- function(x) py_get_item(train_dataset, x)[[0]]
stat_fun <- function(x, str_fun) {
fun_var <- paste0("fun_get_tensor(x)", "$", str_fun, "()")
sapply(idx, function(x)
ifelse(is.numeric(eval(parse(text = fun_var))),  # size return character
eval(parse(text = fun_var)),              # all else are numeric
as.character(eval(parse(text = fun_var)))))
}
dt <- data.table(ridx = idx+1,
do.call(data.table,
lapply(
sapply(fun_list, function(x) paste(x, collapse = "()$")),
function(y) stat_fun(1, y)
)
)
)
library(data.table)
library(tictoc)
options(torch.extract.style = 'python')
tic()
fun_list <- list(
numel = c("numel"),
sum   = c("sum",    "item"),
mean  = c("mean",   "item"),
std   = c("std",    "item"),
med   = c("median", "item"),
max   = c("max",    "item"),
min   = c("min",    "item")
)
idx <- seq(0L, 599L)
fun_get_tensor <- function(x) py_get_item(train_dataset, x)[[1]]
stat_fun <- function(x, str_fun) {
fun_var <- paste0("fun_get_tensor(x)", "$", str_fun, "()")
sapply(idx, function(x)
ifelse(is.numeric(eval(parse(text = fun_var))),  # size return character
eval(parse(text = fun_var)),              # all else are numeric
as.character(eval(parse(text = fun_var)))))
}
dt <- data.table(ridx = idx+1,
do.call(data.table,
lapply(
sapply(fun_list, function(x) paste(x, collapse = "()$")),
function(y) stat_fun(1, y)
)
)
)
library(data.table)
library(tictoc)
options(torch.extract.style = 'R')
tic()
fun_list <- list(
numel = c("numel"),
sum   = c("sum",    "item"),
mean  = c("mean",   "item"),
std   = c("std",    "item"),
med   = c("median", "item"),
max   = c("max",    "item"),
min   = c("min",    "item")
)
idx <- seq(0L, 599L)
fun_get_tensor <- function(x) py_get_item(train_dataset, x)[[1]]
stat_fun <- function(x, str_fun) {
fun_var <- paste0("fun_get_tensor(x)", "$", str_fun, "()")
sapply(idx, function(x)
ifelse(is.numeric(eval(parse(text = fun_var))),  # size return character
eval(parse(text = fun_var)),              # all else are numeric
as.character(eval(parse(text = fun_var)))))
}
dt <- data.table(ridx = idx+1,
do.call(data.table,
lapply(
sapply(fun_list, function(x) paste(x, collapse = "()$")),
function(y) stat_fun(1, y)
)
)
)
getOption("torch.extract.style")
library(data.table)
library(tictoc)
options(torch.extract.style = 'python')
tic()
fun_list <- list(
numel = c("numel"),
sum   = c("sum",    "item"),
mean  = c("mean",   "item"),
std   = c("std",    "item"),
med   = c("median", "item"),
max   = c("max",    "item"),
min   = c("min",    "item")
)
idx <- seq(0L, 599L)
fun_get_tensor <- function(x) py_get_item(train_dataset, x)[[1]]
stat_fun <- function(x, str_fun) {
fun_var <- paste0("fun_get_tensor(x)", "$", str_fun, "()")
sapply(idx, function(x)
ifelse(is.numeric(eval(parse(text = fun_var))),  # size return character
eval(parse(text = fun_var)),              # all else are numeric
as.character(eval(parse(text = fun_var)))))
}
dt <- data.table(ridx = idx+1,
do.call(data.table,
lapply(
sapply(fun_list, function(x) paste(x, collapse = "()$")),
function(y) stat_fun(1, y)
)
)
)
getOption("torch.extract.style")
rTorch::torch_config()
?install_pytorch
install_pytorch(version = "1.6", conda_python_version = "3.7",
extra_packages = c("pandas", "matplotlib",
dry_run = FALSE)
rTorch::install_pytorch(version = "1.6", conda_python_version = "3.7",
extra_packages = c("pandas", "matplotlib",
dry_run = FALSE)
rTorch::install_pytorch(version = "1.6", conda_python_version = "3.7",
extra_packages = c("pandas", "matplotlib"),
dry_run = FALSE)
source('~/.active-rstudio-document', echo=TRUE)
bookdown::preview_chapter()
bookdown::bookdown_site()
bookdown::serve_book()
bookdown::serve_book()
library(rTorch)
rTorch::torchvision
rTorch::torchvision
rTorch::np
rTorch::torch
rTorch::torchvision
rTorch::np
rTorch::torch
usethis::use_readme_rmd()
